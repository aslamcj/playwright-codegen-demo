// Generated Code Examples from Codegen Demos
// This file shows typical output from Playwright codegen sessions
// Perfect for demonstrating before/after code organization

// ============================================================================
// Example 1: Raw Codegen Output - SauceDemo Login
// ============================================================================

// This is what codegen produces - functional but not organized
async function rawCodegenLoginExample(page) {
  // Generated by Playwright codegen
  await page.goto('https://www.saucedemo.com/');
  await page.getByTestId('username').click();
  await page.getByTestId('username').fill('standard_user');
  await page.getByTestId('password').click();
  await page.getByTestId('password').fill('secret_sauce');
  await page.getByTestId('login-button').click();
  await page.getByText('Products').click();
}

// ============================================================================
// Example 2: Organized Version using Page Objects
// ============================================================================

// This shows how to refactor codegen output into our framework
async function organizedLoginExample(page) {
  // Import our page objects
  const SauceDemoLoginPage = require('../pages/SauceDemoLoginPage');
  const testUsers = require('../data/testUsers.json');
  
  // Create page object instance
  const loginPage = new SauceDemoLoginPage(page);
  const validUser = testUsers.validUsers.standard;
  
  // Use organized methods instead of raw selectors
  await loginPage.goto();
  await loginPage.login(validUser.username, validUser.password);
  
  // Much cleaner and more maintainable!
}

// ============================================================================
// Example 3: Raw Codegen Output - TodoMVC Operations
// ============================================================================

async function rawCodegenTodoExample(page) {
  // Generated by Playwright codegen
  await page.goto('https://todomvc.com/examples/react/#/');
  await page.getByPlaceholder('What needs to be done?').click();
  await page.getByPlaceholder('What needs to be done?').fill('Learn Playwright automation');
  await page.getByPlaceholder('What needs to be done?').press('Enter');
  await page.getByPlaceholder('What needs to be done?').fill('Create amazing demos');
  await page.getByPlaceholder('What needs to be done?').press('Enter');
  await page.getByLabel('Toggle Todo').first().check();
  await page.getByRole('link', { name: 'Active' }).click();
  await page.getByRole('link', { name: 'Completed' }).click();
  await page.getByRole('button', { name: 'Clear completed' }).click();
}

// ============================================================================
// Example 4: Organized Version with Data-Driven Approach
// ============================================================================

async function organizedTodoExample(page) {
  // Import our framework components
  const TodoMVCPage = require('../pages/TodoMVCPage');
  const TestHelpers = require('../utils/TestHelpers');
  const todoData = require('../data/todoItems.json');
  
  // Create page object
  const todoPage = new TodoMVCPage(page);
  
  // Use test data instead of hardcoded values
  const demoTodos = todoData.demoScenarios.quickDemo.todos;
  
  // Organized, readable, and maintainable code
  await todoPage.goto();
  await todoPage.addMultipleTodos(demoTodos);
  await todoPage.completeTodo(demoTodos[0]);
  await todoPage.filterTodos('active');
  await todoPage.filterTodos('completed');
  await todoPage.clearCompleted();
  
  // Add demo-friendly logging
  TestHelpers.logTestCompletion('Todo Demo', 'SUCCESS');
}

// ============================================================================
// Example 5: Raw Codegen Output - Shopping Cart Flow
// ============================================================================

async function rawCodegenShoppingExample(page) {
  // Generated by Playwright codegen - notice the repetitive patterns
  await page.goto('https://www.saucedemo.com/');
  await page.getByTestId('username').fill('standard_user');
  await page.getByTestId('password').fill('secret_sauce');
  await page.getByTestId('login-button').click();
  
  await page.getByTestId('add-to-cart-sauce-labs-backpack').click();
  await page.getByTestId('add-to-cart-sauce-labs-bike-light').click();
  await page.getByTestId('add-to-cart-sauce-labs-bolt-t-shirt').click();
  
  await page.locator('[data-test="product_sort_container"]').selectOption('lohi');
  await page.locator('[data-test="shopping-cart-link"]').click();
  await page.getByTestId('continue-shopping').click();
  
  await page.locator('#react-burger-menu-btn').click();
  await page.locator('#logout_sidebar_link').click();
}

// ============================================================================
// Example 6: Organized Version with Business Logic
// ============================================================================

async function organizedShoppingExample(page) {
  // Import framework components
  const SauceDemoLoginPage = require('../pages/SauceDemoLoginPage');
  const SauceDemoInventoryPage = require('../pages/SauceDemoInventoryPage');
  const testUsers = require('../data/testUsers.json');
  const products = require('../data/products.json');
  const TestHelpers = require('../utils/TestHelpers');
  
  // Create page objects
  const loginPage = new SauceDemoLoginPage(page);
  const inventoryPage = new SauceDemoInventoryPage(page);
  
  // Use business-friendly test data
  const user = testUsers.validUsers.standard;
  const shoppingScenario = products.demoScenarios.budgetShopping;
  
  // Organized business workflow
  TestHelpers.logTestStep('Starting shopping demo');
  
  // Login process
  await loginPage.goto();
  await loginPage.login(user.username, user.password);
  
  // Shopping process with business logic
  for (const productKey of shoppingScenario.products) {
    const product = products.availableProducts[productKey];
    await inventoryPage.addProductToCart(product.name);
    TestHelpers.demoMode(page, `Added ${product.name} (${product.price})`);
  }
  
  // Sort and review cart
  await inventoryPage.sortProductsBy('Price (low to high)');
  await inventoryPage.goToCart();
  
  // Clean logout
  await page.goBack(); // Return to inventory
  await inventoryPage.logout();
  
  TestHelpers.logTestCompletion('Shopping Demo', 'SUCCESS');
}

// ============================================================================
// Example 7: Codegen Output with Assertions Added
// ============================================================================

// Raw codegen doesn't include assertions - you need to add them
async function rawCodegenWithAssertions(page) {
  const { expect } = require('@playwright/test');
  
  // Original codegen output
  await page.goto('https://www.saucedemo.com/');
  await page.getByTestId('username').fill('standard_user');
  await page.getByTestId('password').fill('secret_sauce');
  await page.getByTestId('login-button').click();
  
  // Manually added assertions to make it a proper test
  await expect(page.locator('.title')).toHaveText('Products');
  await expect(page).toHaveURL(/.*inventory.html/);
  await expect(page.locator('.inventory_item')).toHaveCount(6);
}

// ============================================================================
// Example 8: Framework Version with Comprehensive Validation
// ============================================================================

async function frameworkVersionWithValidation(page) {
  const { expect } = require('@playwright/test');
  const SauceDemoLoginPage = require('../pages/SauceDemoLoginPage');
  const SauceDemoInventoryPage = require('../pages/SauceDemoInventoryPage');
  const testUsers = require('../data/testUsers.json');
  const TestHelpers = require('../utils/TestHelpers');
  
  // Setup
  const loginPage = new SauceDemoLoginPage(page);
  const inventoryPage = new SauceDemoInventoryPage(page);
  const user = testUsers.validUsers.standard;
  
  // Login with validation
  await loginPage.goto();
  expect(await loginPage.isLoginPageDisplayed()).toBeTruthy();
  
  await loginPage.login(user.username, user.password);
  
  // Comprehensive validation
  await inventoryPage.waitForPageLoad();
  expect(await inventoryPage.isInventoryPageDisplayed()).toBeTruthy();
  expect(await TestHelpers.validatePageURL(page, '/inventory.html')).toBeTruthy();
  
  const productCount = (await inventoryPage.getAllProductNames()).length;
  expect(productCount).toBe(6);
  
  TestHelpers.logTestCompletion('Validated Login Test', 'PASSED');
}

// ============================================================================
// Codegen Transformation Guide
// ============================================================================

/*
CODEGEN TO FRAMEWORK TRANSFORMATION STEPS:

1. EXTRACT SELECTORS
   Raw: page.getByTestId('username')
   Framework: this.usernameInput (defined in Page Object)

2. CREATE REUSABLE METHODS
   Raw: Multiple fill/click operations
   Framework: Single login(username, password) method

3. ADD TEST DATA
   Raw: Hardcoded 'standard_user'
   Framework: testUsers.validUsers.standard.username

4. INCLUDE VALIDATION
   Raw: Just actions, no verification
   Framework: Assertions and error checking

5. ADD LOGGING
   Raw: Silent execution
   Framework: Console output for demo clarity

6. ORGANIZE INTO TEST STRUCTURE
   Raw: Single function
   Framework: Proper test cases with setup/teardown

7. MAKE IT DATA-DRIVEN
   Raw: One scenario
   Framework: Multiple scenarios with different data

8. ADD ERROR HANDLING
   Raw: Assume everything works
   Framework: Handle failures gracefully

DEMO TALKING POINTS:
- "Codegen gives us the foundation"
- "Framework makes it maintainable"
- "Data-driven approach scales better"
- "Proper validation ensures test reliability"
- "Organization makes tests readable by everyone"
*/

module.exports = {
  rawCodegenLoginExample,
  organizedLoginExample,
  rawCodegenTodoExample,
  organizedTodoExample,
  rawCodegenShoppingExample,
  organizedShoppingExample,
  rawCodegenWithAssertions,
  frameworkVersionWithValidation
};